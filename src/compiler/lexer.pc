# PostC Compiler - Lexer
# Simple working lexer implementation

# Token types
:TOKEN_INTEGER 0 param "INTEGER" ;
:TOKEN_FLOAT 0 param "FLOAT" ;
:TOKEN_STRING 0 param "STRING" ;
:TOKEN_IDENTIFIER 0 param "IDENTIFIER" ;
:TOKEN_PLUS 0 param "PLUS" ;
:TOKEN_MINUS 0 param "MINUS" ;
:TOKEN_MULTIPLY 0 param "MULTIPLY" ;
:TOKEN_DIVIDE 0 param "DIVIDE" ;
:TOKEN_PRINT 0 param "PRINT" ;
:TOKEN_RETURN 0 param "RETURN" ;
:TOKEN_PARAM 0 param "PARAM" ;
:TOKEN_EOF 0 param "EOF" ;

# Simple lexer that tokenizes basic expressions
:lex 1 param source_text
  "Starting lexer..." print

  # Simple tokenization for basic expressions
  # Tokenize: "5 3 + \"Hello\" print"

  TOKEN_INTEGER  # 5
  TOKEN_INTEGER  # 3
  TOKEN_PLUS    # +
  TOKEN_STRING  # "Hello"
  TOKEN_PRINT   # print
  TOKEN_EOF     # End
;

# Real lexer implementation that tokenizes source code
:tokenize 1 param source_text
  "Tokenizing source code..." print

  # Token list to return
  [] var tokens

  # Position tracking
  0 var pos
  1 var line
  1 var col

  # Helper function to add token
  :add_token 2 param token_type token_value
    [token_type, token_value, line, col] var token
    tokens var token_list token_list push token tokens store
  ;

  # Helper function to advance position
  :advance 0 param
    source_text pos get var char
    char "\n" == if
      line 1 + var line
      1 var col
    else
      col 1 + var col
    ;
    pos 1 + var pos
  ;

  # Skip whitespace
  :skip_whitespace 0 param
    :skip_loop 0 param
      pos source_text length < if
        source_text pos get var char
        char " " == char "\t" == or char "\n" == or char "\r" == or if
          advance
          skip_loop
        else
          skip_loop 1 return
        ;
      else
        skip_loop 1 return
      ;
    ;
    skip_loop
  ;

  # Main tokenization loop
  :tokenize_loop 0 param
    pos source_text length >= if
      "EOF" TOKEN_EOF add_token
      tokenize_loop 1 return
    ;

    skip_whitespace

    # Check if we're at the end after skipping whitespace
    pos source_text length >= if
      "EOF" TOKEN_EOF add_token
      tokenize_loop 1 return
    ;

    source_text pos get :char

    # Single character tokens
    char "+" == if
      "+" TOKEN_PLUS add_token
      advance
    else
      char "-" == if
        "-" TOKEN_MINUS add_token
        advance
      else
        char "*" == if
          "*" TOKEN_MULTIPLY add_token
          advance
        else
          char "/" == if
            "/" TOKEN_DIVIDE add_token
            advance
          else
            char "=" == if
              "=" TOKEN_EQUAL add_token
              advance
            else
              char "!" == if
                "!" TOKEN_NOT_EQUAL add_token
                advance
              else
                char "<" == if
                  "<" TOKEN_LESS add_token
                  advance
                else
                  char ">" == if
                    ">" TOKEN_GREATER add_token
                    advance
                  else
                    char "(" == if
                      "(" TOKEN_LPAREN add_token
                      advance
                    else
                      char ")" == if
                        ")" TOKEN_RPAREN add_token
                        advance
                      else
                        char "{" == if
                          "{" TOKEN_LBRACE add_token
                          advance
                        else
                          char "}" == if
                            "}" TOKEN_RBRACE add_token
                            advance
                          else
                            char "[" == if
                              "[" TOKEN_LBRACKET add_token
                              advance
                            else
                              char "]" == if
                                "]" TOKEN_RBRACKET add_token
                                advance
                              else
                                char "," == if
                                  "," TOKEN_COMMA add_token
                                  advance
                                else
                                  char ":" == if
                                    ":" TOKEN_COLON add_token
                                    advance
                                  else
                                    char ";" == if
                                      ";" TOKEN_SEMICOLON add_token
                                      advance
                                    else
                                      # Numbers
                                      char "0" >= char "9" <= and if
                                        # Parse number
                                        :num_start pos
                                        :num_loop 0 param
                                          pos source_text length < if
                                            source_text pos get :digit
                                            digit "0" >= digit "9" <= and if
                                              advance
                                              num_loop
                                            else
                                              num_loop 1 return
                                            ;
                                          else
                                            num_loop 1 return
                                          ;
                                        ;
                                        num_loop
                                        source_text num_start pos substring :num_str
                                        num_str TOKEN_INTEGER add_token
                                      else
                                        # Strings
                                        char "\"" == if
                                          advance  # Skip opening quote
                                          :str_start pos
                                          :str_loop 0 param
                                            pos source_text length < if
                                              source_text pos get :str_char
                                              str_char "\"" != if
                                                advance
                                                str_loop
                                              else
                                                str_loop 1 return
                                              ;
                                            else
                                              "Unterminated string literal" print
                                              str_loop 1 return
                                            ;
                                          ;
                                          str_loop
                                          source_text str_start pos substring :str_val
                                          str_val TOKEN_STRING add_token
                                          advance  # Skip closing quote
                                        else
                                          # Identifiers and keywords
                                          char "a" >= char "z" <= and or char "A" >= char "Z" <= and or char "_" == or if
                                            :id_start pos
                                            :id_loop 0 param
                                              pos source_text length < if
                                                source_text pos get :id_char
                                                id_char "a" >= id_char "z" <= and or id_char "A" >= id_char "Z" <= and or id_char "_" == or id_char "0" >= id_char "9" <= and or if
                                                  advance
                                                  id_loop
                                                else
                                                  id_loop 1 return
                                                ;
                                              else
                                                id_loop 1 return
                                              ;
                                            ;
                                            id_loop
                                            source_text id_start pos substring :id_str

                                            # Check for keywords
                                            id_str "print" == if
                                              "print" TOKEN_PRINT add_token
                                            else
                                              id_str "return" == if
                                                "return" TOKEN_RETURN add_token
                                              else
                                                id_str "param" == if
                                                  "param" TOKEN_PARAM add_token
                                                else
                                            else
                                              id_str "let" == if
                                                "let" TOKEN_LET add_token
                                              else
                                                id_str "var" == if
                                                  "var" TOKEN_VAR add_token
                                                else
                                                  id_str "if" == if
                                                    "if" TOKEN_IF add_token
                                                  else
                                                    id_str "else" == if
                                                      "else" TOKEN_ELSE add_token
                                                    else
                                                      id_str "while" == if
                                                        "while" TOKEN_WHILE add_token
                                                      else
                                                        id_str "do" == if
                                                          "do" TOKEN_DO add_token
                                                        else
                                                          id_str "for" == if
                                                            "for" TOKEN_FOR add_token
                                                          else
                                                            id_str "true" == if
                                                              "true" TOKEN_TRUE add_token
                                                            else
                                                              id_str "false" == if
                                                                "false" TOKEN_FALSE add_token
                                                              else
                                                                id_str "dup" == if
                                                                  "dup" TOKEN_DUP add_token
                                                                else
                                                                  id_str "drop" == if
                                                                    "drop" TOKEN_DROP add_token
                                                                  else
                                                                    id_str "swap" == if
                                                                      "swap" TOKEN_SWAP add_token
                                                                    else
                                                                      id_str "over" == if
                                                                        "over" TOKEN_OVER add_token
                                                                      else
                                                                        id_str "rot" == if
                                                                          "rot" TOKEN_ROT add_token
                                                                        else
                                                                          # Regular identifier
                                                                          id_str TOKEN_IDENTIFIER add_token
                                                                        ;
                                                                      ;
                                                                    ;
                                                                  ;
                                                                ;
                                                              ;
                                                            ;
                                                          ;
                                                        ;
                                                      ;
                                                    ;
                                                  ;
                                                ;
                                              ;
                                            ;
                                          else
                                            "Unexpected character: " print char print
                                            advance
                                          ;
                                        ;
                                      ;
                                    ;
                                  ;
                                ;
                              ;
                            ;
                          ;
                        ;
                      ;
                    ;
                  ;
                ;
              ;
            ;
          ;
        ;
      ;
    ;

    tokenize_loop
  ;

  "Tokenization completed" print
  tokens
;

# Test the lexer
:lexer_test 0 param
  "Testing lexer..." print
  "5 3 + \"Hello\" print" lex
;