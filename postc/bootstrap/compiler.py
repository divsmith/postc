#!/usr/bin/env python3

"""
PostC Bootstrap Compiler - Main compiler driver
"""

import sys
import os

from lexer import Lexer
from parser import Parser
from codegen import CodeGenerator

def compile_file(filename):
    """Compile a PostC source file."""
    # Read the source file
    with open(filename, 'r') as f:
        source = f.read()
    
    # Lexical analysis
    print("Lexing...")
    lexer = Lexer(source)
    tokens = lexer.tokenize()
    
    # Print tokens for debugging
    print("Tokens:")
    for token in tokens[:20]:  # Limit output for readability
        print(f"  {token}")
    if len(tokens) > 20:
        print(f"  ... and {len(tokens) - 20} more tokens")
    
    # Parsing
    print("\nParsing...")
    parser = Parser(tokens)
    ast = parser.parse_program()
    
    # Print AST for debugging
    print("AST:")
    def print_ast(node, indent=0):
        prefix = "  " * indent
        if node.value is not None:
            print(f"{prefix}{node.type.value}: {node.value}")
        else:
            print(f"{prefix}{node.type.value}")
            
        for child in node.children[:5]:  # Limit output for readability
            print_ast(child, indent + 1)
        if len(node.children) > 5:
            print(f"{prefix}  ... and {len(node.children) - 5} more children")
    
    print_ast(ast)
    
    # Code generation
    print("\nGenerating code...")
    codegen = CodeGenerator()
    instructions = codegen.generate_code(ast)
    
    # Print the generated bytecode
    print("Constants:")
    for i, const in enumerate(codegen.constants):
        print(f"  {i}: {const}")
        
    print("\nFunctions:")
    for name, func in codegen.functions.items():
        print(f"  {name} ({func.param_count} params):")
        for i, instr in enumerate(func.instructions[:10]):  # Limit output for readability
            print(f"    {i}: {instr}")
        if len(func.instructions) > 10:
            print(f"    ... and {len(func.instructions) - 10} more instructions")
            
    print("\nMain instructions:")
    for i, instr in enumerate(instructions[:10]):  # Limit output for readability
        print(f"  {i}: {instr}")
    if len(instructions) > 10:
        print(f"  ... and {len(instructions) - 10} more instructions")
        
    return instructions, codegen.constants

def main():
    """Main function."""
    if len(sys.argv) < 2:
        print("Usage: python3 compiler.py <source_file>")
        return
        
    filename = sys.argv[1]
    if not os.path.exists(filename):
        print(f"Error: File '{filename}' not found")
        return
        
    try:
        compile_file(filename)
    except Exception as e:
        print(f"Compilation error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()